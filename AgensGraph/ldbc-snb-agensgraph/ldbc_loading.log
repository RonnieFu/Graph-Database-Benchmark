********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

CREATE EXTENSION
********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

CREATE SERVER
********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

CREATE EXTENSION
********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(18556);
 SELECT PG_PREWARM(18576);
 SELECT PG_PREWARM(18570);
 SELECT PG_PREWARM(18571);
 SELECT PG_PREWARM(18572);
 SELECT PG_PREWARM(18547);
 SELECT PG_PREWARM(18590);
 SELECT PG_PREWARM(18604);
 SELECT PG_PREWARM(18599);
 SELECT PG_PREWARM(18613);
 SELECT PG_PREWARM(18561);
 SELECT PG_PREWARM(18618);
 SELECT PG_PREWARM(18632);
 SELECT PG_PREWARM(18585);
 SELECT PG_PREWARM(18627);
 SELECT PG_PREWARM(18641);
 SELECT PG_PREWARM(18660);
 SELECT PG_PREWARM(18674);
 SELECT PG_PREWARM(18697);
 SELECT PG_PREWARM(18646);
 SELECT PG_PREWARM(18688);
 SELECT PG_PREWARM(18655);
 SELECT PG_PREWARM(18669);
 SELECT PG_PREWARM(18683);
 SELECT PG_PREWARM(18732);
 SELECT PG_PREWARM(18747);
 SELECT PG_PREWARM(18728);
 SELECT PG_PREWARM(18702);
 SELECT PG_PREWARM(18717);
 SELECT PG_PREWARM(18762);
 SELECT PG_PREWARM(18711);
 SELECT PG_PREWARM(18726);
 SELECT PG_PREWARM(18727);
 SELECT PG_PREWARM(18741);
 SELECT PG_PREWARM(18742);
 SELECT PG_PREWARM(18743);
 SELECT PG_PREWARM(18756);
 SELECT PG_PREWARM(18757);
 SELECT PG_PREWARM(18758);
 SELECT PG_PREWARM(18771);
 SELECT PG_PREWARM(18772);
 SELECT PG_PREWARM(18773);
 SELECT PG_PREWARM(18807);
 SELECT PG_PREWARM(18777);
 SELECT PG_PREWARM(18786);
 SELECT PG_PREWARM(18792);
 SELECT PG_PREWARM(18801);
 SELECT PG_PREWARM(18802);
 SELECT PG_PREWARM(18803);
 SELECT PG_PREWARM(18816);
 SELECT PG_PREWARM(18817);
 SELECT PG_PREWARM(18852);
 SELECT PG_PREWARM(18867);
 SELECT PG_PREWARM(18861);
 SELECT PG_PREWARM(18822);
 SELECT PG_PREWARM(18837);
 SELECT PG_PREWARM(18882);
 SELECT PG_PREWARM(18897);
 SELECT PG_PREWARM(18831);
 SELECT PG_PREWARM(18846);
 SELECT PG_PREWARM(18847);
 SELECT PG_PREWARM(18848);
 SELECT PG_PREWARM(18862);
 SELECT PG_PREWARM(18863);
 SELECT PG_PREWARM(18876);
 SELECT PG_PREWARM(18877);
 SELECT PG_PREWARM(18878);
 SELECT PG_PREWARM(18891);
 SELECT PG_PREWARM(18892);
 SELECT PG_PREWARM(18893);
 SELECT PG_PREWARM(18906);
 SELECT PG_PREWARM(18907);
 SELECT PG_PREWARM(18908);
 SELECT PG_PREWARM(18936);
 SELECT PG_PREWARM(18937);
 SELECT PG_PREWARM(18938);
 SELECT PG_PREWARM(18927);
 SELECT PG_PREWARM(18957);
 SELECT PG_PREWARM(18912);
 SELECT PG_PREWARM(18987);
 SELECT PG_PREWARM(18966);
 SELECT PG_PREWARM(18967);
 SELECT PG_PREWARM(18942);
 SELECT PG_PREWARM(18972);
 SELECT PG_PREWARM(19002);
 SELECT PG_PREWARM(18951);
 SELECT PG_PREWARM(18968);
 SELECT PG_PREWARM(18921);
 SELECT PG_PREWARM(18922);
 SELECT PG_PREWARM(18923);
 SELECT PG_PREWARM(18981);
 SELECT PG_PREWARM(18982);
 SELECT PG_PREWARM(18983);
 SELECT PG_PREWARM(18996);
 SELECT PG_PREWARM(18997);
 SELECT PG_PREWARM(18998);
 SELECT PG_PREWARM(19032);
 SELECT PG_PREWARM(19047);
 SELECT PG_PREWARM(19062);
 SELECT PG_PREWARM(19026);
 SELECT PG_PREWARM(19027);
 SELECT PG_PREWARM(19017);
 SELECT PG_PREWARM(19077);
 SELECT PG_PREWARM(19092);
 SELECT PG_PREWARM(19011);
 SELECT PG_PREWARM(19012);
 SELECT PG_PREWARM(19041);
 SELECT PG_PREWARM(19042);
 SELECT PG_PREWARM(19043);
 SELECT PG_PREWARM(19056);
 SELECT PG_PREWARM(19057);
 SELECT PG_PREWARM(19058);
 SELECT PG_PREWARM(19071);
 SELECT PG_PREWARM(19072);
 SELECT PG_PREWARM(19073);
 SELECT PG_PREWARM(19086);
 SELECT PG_PREWARM(19087);
 SELECT PG_PREWARM(19088);
 SELECT PG_PREWARM(19101);
 SELECT PG_PREWARM(19122);
 SELECT PG_PREWARM(19107);
 SELECT PG_PREWARM(18712);
 SELECT PG_PREWARM(18713);
 SELECT PG_PREWARM(19102);
 SELECT PG_PREWARM(19103);
 SELECT PG_PREWARM(19116);
 SELECT PG_PREWARM(19117);
 SELECT PG_PREWARM(19118);
 SELECT PG_PREWARM(19131);
 SELECT PG_PREWARM(19132);
 SELECT PG_PREWARM(19133);
 SELECT PG_PREWARM(18787);
 SELECT PG_PREWARM(18788);
 SELECT PG_PREWARM(18818);
 SELECT PG_PREWARM(18832);
 SELECT PG_PREWARM(18833);
 SELECT PG_PREWARM(18952);
 SELECT PG_PREWARM(18953);
 SELECT PG_PREWARM(19013);
 SELECT PG_PREWARM(19028);
 SELECT PG_PREWARM(19582);
 SELECT PG_PREWARM(19583);
 SELECT PG_PREWARM(19594);
 SELECT PG_PREWARM(19584);
 SELECT PG_PREWARM(19595);
 SELECT PG_PREWARM(19585);
 SELECT PG_PREWARM(19596);
 SELECT PG_PREWARM(19586);
 SELECT PG_PREWARM(19587);
 SELECT PG_PREWARM(19591);
 SELECT PG_PREWARM(19588);
 SELECT PG_PREWARM(19593);
 SELECT PG_PREWARM(19589);
 SELECT PG_PREWARM(19592);
 SELECT PG_PREWARM(19590);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(19758);
 SELECT PG_PREWARM(19778);
 SELECT PG_PREWARM(19772);
 SELECT PG_PREWARM(19773);
 SELECT PG_PREWARM(19774);
 SELECT PG_PREWARM(19749);
 SELECT PG_PREWARM(19792);
 SELECT PG_PREWARM(19806);
 SELECT PG_PREWARM(19820);
 SELECT PG_PREWARM(19787);
 SELECT PG_PREWARM(19843);
 SELECT PG_PREWARM(19763);
 SELECT PG_PREWARM(19834);
 SELECT PG_PREWARM(19801);
 SELECT PG_PREWARM(19815);
 SELECT PG_PREWARM(19829);
 SELECT PG_PREWARM(19862);
 SELECT PG_PREWARM(19876);
 SELECT PG_PREWARM(19890);
 SELECT PG_PREWARM(19885);
 SELECT PG_PREWARM(19848);
 SELECT PG_PREWARM(19857);
 SELECT PG_PREWARM(19871);
 SELECT PG_PREWARM(19899);
 SELECT PG_PREWARM(19934);
 SELECT PG_PREWARM(19949);
 SELECT PG_PREWARM(19930);
 SELECT PG_PREWARM(19904);
 SELECT PG_PREWARM(19919);
 SELECT PG_PREWARM(19964);
 SELECT PG_PREWARM(19913);
 SELECT PG_PREWARM(19928);
 SELECT PG_PREWARM(19929);
 SELECT PG_PREWARM(19943);
 SELECT PG_PREWARM(19944);
 SELECT PG_PREWARM(19945);
 SELECT PG_PREWARM(19958);
 SELECT PG_PREWARM(19959);
 SELECT PG_PREWARM(19960);
 SELECT PG_PREWARM(19973);
 SELECT PG_PREWARM(19974);
 SELECT PG_PREWARM(19975);
 SELECT PG_PREWARM(20009);
 SELECT PG_PREWARM(19979);
 SELECT PG_PREWARM(19988);
 SELECT PG_PREWARM(19994);
 SELECT PG_PREWARM(20003);
 SELECT PG_PREWARM(20004);
 SELECT PG_PREWARM(20005);
 SELECT PG_PREWARM(20018);
 SELECT PG_PREWARM(20019);
 SELECT PG_PREWARM(20054);
 SELECT PG_PREWARM(20069);
 SELECT PG_PREWARM(20024);
 SELECT PG_PREWARM(20063);
 SELECT PG_PREWARM(20039);
 SELECT PG_PREWARM(20084);
 SELECT PG_PREWARM(20099);
 SELECT PG_PREWARM(20033);
 SELECT PG_PREWARM(20034);
 SELECT PG_PREWARM(20048);
 SELECT PG_PREWARM(20049);
 SELECT PG_PREWARM(20050);
 SELECT PG_PREWARM(20064);
 SELECT PG_PREWARM(20065);
 SELECT PG_PREWARM(20078);
 SELECT PG_PREWARM(20079);
 SELECT PG_PREWARM(20080);
 SELECT PG_PREWARM(20093);
 SELECT PG_PREWARM(20094);
 SELECT PG_PREWARM(20095);
 SELECT PG_PREWARM(20108);
 SELECT PG_PREWARM(20109);
 SELECT PG_PREWARM(20110);
 SELECT PG_PREWARM(20174);
 SELECT PG_PREWARM(20138);
 SELECT PG_PREWARM(20139);
 SELECT PG_PREWARM(20140);
 SELECT PG_PREWARM(20129);
 SELECT PG_PREWARM(20159);
 SELECT PG_PREWARM(20114);
 SELECT PG_PREWARM(20123);
 SELECT PG_PREWARM(20144);
 SELECT PG_PREWARM(20189);
 SELECT PG_PREWARM(20153);
 SELECT PG_PREWARM(20168);
 SELECT PG_PREWARM(20169);
 SELECT PG_PREWARM(20170);
 SELECT PG_PREWARM(20124);
 SELECT PG_PREWARM(20125);
 SELECT PG_PREWARM(20183);
 SELECT PG_PREWARM(20184);
 SELECT PG_PREWARM(20185);
 SELECT PG_PREWARM(20198);
 SELECT PG_PREWARM(20199);
 SELECT PG_PREWARM(20200);
 SELECT PG_PREWARM(20219);
 SELECT PG_PREWARM(20234);
 SELECT PG_PREWARM(20249);
 SELECT PG_PREWARM(20204);
 SELECT PG_PREWARM(20213);
 SELECT PG_PREWARM(20244);
 SELECT PG_PREWARM(20264);
 SELECT PG_PREWARM(20279);
 SELECT PG_PREWARM(20214);
 SELECT PG_PREWARM(20228);
 SELECT PG_PREWARM(20229);
 SELECT PG_PREWARM(20230);
 SELECT PG_PREWARM(20243);
 SELECT PG_PREWARM(20245);
 SELECT PG_PREWARM(20258);
 SELECT PG_PREWARM(20259);
 SELECT PG_PREWARM(20260);
 SELECT PG_PREWARM(20273);
 SELECT PG_PREWARM(20274);
 SELECT PG_PREWARM(20275);
 SELECT PG_PREWARM(20288);
 SELECT PG_PREWARM(20289);
 SELECT PG_PREWARM(20290);
 SELECT PG_PREWARM(20309);
 SELECT PG_PREWARM(20324);
 SELECT PG_PREWARM(20294);
 SELECT PG_PREWARM(20303);
 SELECT PG_PREWARM(20304);
 SELECT PG_PREWARM(20305);
 SELECT PG_PREWARM(20318);
 SELECT PG_PREWARM(20319);
 SELECT PG_PREWARM(20320);
 SELECT PG_PREWARM(20333);
 SELECT PG_PREWARM(20334);
 SELECT PG_PREWARM(20335);
 SELECT PG_PREWARM(19914);
 SELECT PG_PREWARM(19915);
 SELECT PG_PREWARM(19989);
 SELECT PG_PREWARM(19990);
 SELECT PG_PREWARM(20020);
 SELECT PG_PREWARM(20035);
 SELECT PG_PREWARM(20154);
 SELECT PG_PREWARM(20155);
 SELECT PG_PREWARM(20215);
 SELECT PG_PREWARM(20784);
 SELECT PG_PREWARM(20785);
 SELECT PG_PREWARM(20786);
 SELECT PG_PREWARM(20797);
 SELECT PG_PREWARM(20787);
 SELECT PG_PREWARM(20798);
 SELECT PG_PREWARM(20788);
 SELECT PG_PREWARM(20789);
 SELECT PG_PREWARM(20793);
 SELECT PG_PREWARM(20790);
 SELECT PG_PREWARM(20795);
 SELECT PG_PREWARM(20791);
 SELECT PG_PREWARM(20794);
 SELECT PG_PREWARM(20792);
 SELECT PG_PREWARM(20796);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(20960);
 SELECT PG_PREWARM(20980);
 SELECT PG_PREWARM(20974);
 SELECT PG_PREWARM(20975);
 SELECT PG_PREWARM(20976);
 SELECT PG_PREWARM(20951);
 SELECT PG_PREWARM(20994);
 SELECT PG_PREWARM(21008);
 SELECT PG_PREWARM(21022);
 SELECT PG_PREWARM(20989);
 SELECT PG_PREWARM(21045);
 SELECT PG_PREWARM(20965);
 SELECT PG_PREWARM(21036);
 SELECT PG_PREWARM(21003);
 SELECT PG_PREWARM(21017);
 SELECT PG_PREWARM(21031);
 SELECT PG_PREWARM(21064);
 SELECT PG_PREWARM(21078);
 SELECT PG_PREWARM(21092);
 SELECT PG_PREWARM(21087);
 SELECT PG_PREWARM(21050);
 SELECT PG_PREWARM(21059);
 SELECT PG_PREWARM(21073);
 SELECT PG_PREWARM(21101);
 SELECT PG_PREWARM(21136);
 SELECT PG_PREWARM(21151);
 SELECT PG_PREWARM(21145);
 SELECT PG_PREWARM(21106);
 SELECT PG_PREWARM(21121);
 SELECT PG_PREWARM(21166);
 SELECT PG_PREWARM(21115);
 SELECT PG_PREWARM(21130);
 SELECT PG_PREWARM(21131);
 SELECT PG_PREWARM(21132);
 SELECT PG_PREWARM(21146);
 SELECT PG_PREWARM(21147);
 SELECT PG_PREWARM(21160);
 SELECT PG_PREWARM(21161);
 SELECT PG_PREWARM(21162);
 SELECT PG_PREWARM(21175);
 SELECT PG_PREWARM(21176);
 SELECT PG_PREWARM(21177);
 SELECT PG_PREWARM(21211);
 SELECT PG_PREWARM(21181);
 SELECT PG_PREWARM(21205);
 SELECT PG_PREWARM(21196);
 SELECT PG_PREWARM(21190);
 SELECT PG_PREWARM(21206);
 SELECT PG_PREWARM(21207);
 SELECT PG_PREWARM(21220);
 SELECT PG_PREWARM(21256);
 SELECT PG_PREWARM(21226);
 SELECT PG_PREWARM(21250);
 SELECT PG_PREWARM(21251);
 SELECT PG_PREWARM(21241);
 SELECT PG_PREWARM(21271);
 SELECT PG_PREWARM(21286);
 SELECT PG_PREWARM(21301);
 SELECT PG_PREWARM(21235);
 SELECT PG_PREWARM(21236);
 SELECT PG_PREWARM(21252);
 SELECT PG_PREWARM(21265);
 SELECT PG_PREWARM(21266);
 SELECT PG_PREWARM(21267);
 SELECT PG_PREWARM(21280);
 SELECT PG_PREWARM(21281);
 SELECT PG_PREWARM(21282);
 SELECT PG_PREWARM(21295);
 SELECT PG_PREWARM(21296);
 SELECT PG_PREWARM(21297);
 SELECT PG_PREWARM(21310);
 SELECT PG_PREWARM(21311);
 SELECT PG_PREWARM(21340);
 SELECT PG_PREWARM(21341);
 SELECT PG_PREWARM(21342);
 SELECT PG_PREWARM(21331);
 SELECT PG_PREWARM(21361);
 SELECT PG_PREWARM(21316);
 SELECT PG_PREWARM(21355);
 SELECT PG_PREWARM(21370);
 SELECT PG_PREWARM(21346);
 SELECT PG_PREWARM(21376);
 SELECT PG_PREWARM(21391);
 SELECT PG_PREWARM(21312);
 SELECT PG_PREWARM(21371);
 SELECT PG_PREWARM(21372);
 SELECT PG_PREWARM(21325);
 SELECT PG_PREWARM(21326);
 SELECT PG_PREWARM(21327);
 SELECT PG_PREWARM(21385);
 SELECT PG_PREWARM(21386);
 SELECT PG_PREWARM(21387);
 SELECT PG_PREWARM(21400);
 SELECT PG_PREWARM(21421);
 SELECT PG_PREWARM(21436);
 SELECT PG_PREWARM(21431);
 SELECT PG_PREWARM(21406);
 SELECT PG_PREWARM(21451);
 SELECT PG_PREWARM(21466);
 SELECT PG_PREWARM(21401);
 SELECT PG_PREWARM(21402);
 SELECT PG_PREWARM(21415);
 SELECT PG_PREWARM(21416);
 SELECT PG_PREWARM(21430);
 SELECT PG_PREWARM(21432);
 SELECT PG_PREWARM(21445);
 SELECT PG_PREWARM(21446);
 SELECT PG_PREWARM(21447);
 SELECT PG_PREWARM(21460);
 SELECT PG_PREWARM(21461);
 SELECT PG_PREWARM(21462);
 SELECT PG_PREWARM(21475);
 SELECT PG_PREWARM(21476);
 SELECT PG_PREWARM(21477);
 SELECT PG_PREWARM(21511);
 SELECT PG_PREWARM(21526);
 SELECT PG_PREWARM(21481);
 SELECT PG_PREWARM(21496);
 SELECT PG_PREWARM(21490);
 SELECT PG_PREWARM(21491);
 SELECT PG_PREWARM(21492);
 SELECT PG_PREWARM(21505);
 SELECT PG_PREWARM(21506);
 SELECT PG_PREWARM(21507);
 SELECT PG_PREWARM(21520);
 SELECT PG_PREWARM(21521);
 SELECT PG_PREWARM(21522);
 SELECT PG_PREWARM(21535);
 SELECT PG_PREWARM(21536);
 SELECT PG_PREWARM(21537);
 SELECT PG_PREWARM(21116);
 SELECT PG_PREWARM(21117);
 SELECT PG_PREWARM(21191);
 SELECT PG_PREWARM(21192);
 SELECT PG_PREWARM(21221);
 SELECT PG_PREWARM(21222);
 SELECT PG_PREWARM(21237);
 SELECT PG_PREWARM(21356);
 SELECT PG_PREWARM(21417);
 SELECT PG_PREWARM(21986);
 SELECT PG_PREWARM(21987);
 SELECT PG_PREWARM(21998);
 SELECT PG_PREWARM(21988);
 SELECT PG_PREWARM(21999);
 SELECT PG_PREWARM(21989);
 SELECT PG_PREWARM(22000);
 SELECT PG_PREWARM(21990);
 SELECT PG_PREWARM(21991);
 SELECT PG_PREWARM(21995);
 SELECT PG_PREWARM(21992);
 SELECT PG_PREWARM(21997);
 SELECT PG_PREWARM(21993);
 SELECT PG_PREWARM(21996);
 SELECT PG_PREWARM(21994);
 SELECT PG_PREWARM(21357);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(22162);
 SELECT PG_PREWARM(22182);
 SELECT PG_PREWARM(22176);
 SELECT PG_PREWARM(22177);
 SELECT PG_PREWARM(22178);
 SELECT PG_PREWARM(22153);
 SELECT PG_PREWARM(22196);
 SELECT PG_PREWARM(22210);
 SELECT PG_PREWARM(22224);
 SELECT PG_PREWARM(22191);
 SELECT PG_PREWARM(22247);
 SELECT PG_PREWARM(22167);
 SELECT PG_PREWARM(22238);
 SELECT PG_PREWARM(22205);
 SELECT PG_PREWARM(22219);
 SELECT PG_PREWARM(22233);
 SELECT PG_PREWARM(22266);
 SELECT PG_PREWARM(22280);
 SELECT PG_PREWARM(22294);
 SELECT PG_PREWARM(22289);
 SELECT PG_PREWARM(22252);
 SELECT PG_PREWARM(22261);
 SELECT PG_PREWARM(22275);
 SELECT PG_PREWARM(22303);
 SELECT PG_PREWARM(22338);
 SELECT PG_PREWARM(22353);
 SELECT PG_PREWARM(22347);
 SELECT PG_PREWARM(22308);
 SELECT PG_PREWARM(22323);
 SELECT PG_PREWARM(22368);
 SELECT PG_PREWARM(22317);
 SELECT PG_PREWARM(22332);
 SELECT PG_PREWARM(22333);
 SELECT PG_PREWARM(22334);
 SELECT PG_PREWARM(22348);
 SELECT PG_PREWARM(22349);
 SELECT PG_PREWARM(22362);
 SELECT PG_PREWARM(22363);
 SELECT PG_PREWARM(22364);
 SELECT PG_PREWARM(22377);
 SELECT PG_PREWARM(22378);
 SELECT PG_PREWARM(22379);
 SELECT PG_PREWARM(22413);
 SELECT PG_PREWARM(22383);
 SELECT PG_PREWARM(22407);
 SELECT PG_PREWARM(22398);
 SELECT PG_PREWARM(22392);
 SELECT PG_PREWARM(22408);
 SELECT PG_PREWARM(22409);
 SELECT PG_PREWARM(22422);
 SELECT PG_PREWARM(22443);
 SELECT PG_PREWARM(22458);
 SELECT PG_PREWARM(22428);
 SELECT PG_PREWARM(22452);
 SELECT PG_PREWARM(22453);
 SELECT PG_PREWARM(22473);
 SELECT PG_PREWARM(22488);
 SELECT PG_PREWARM(22503);
 SELECT PG_PREWARM(22437);
 SELECT PG_PREWARM(22438);
 SELECT PG_PREWARM(22454);
 SELECT PG_PREWARM(22467);
 SELECT PG_PREWARM(22468);
 SELECT PG_PREWARM(22469);
 SELECT PG_PREWARM(22482);
 SELECT PG_PREWARM(22483);
 SELECT PG_PREWARM(22484);
 SELECT PG_PREWARM(22497);
 SELECT PG_PREWARM(22498);
 SELECT PG_PREWARM(22499);
 SELECT PG_PREWARM(22512);
 SELECT PG_PREWARM(22513);
 SELECT PG_PREWARM(22542);
 SELECT PG_PREWARM(22543);
 SELECT PG_PREWARM(22544);
 SELECT PG_PREWARM(22533);
 SELECT PG_PREWARM(22563);
 SELECT PG_PREWARM(22518);
 SELECT PG_PREWARM(22557);
 SELECT PG_PREWARM(22572);
 SELECT PG_PREWARM(22548);
 SELECT PG_PREWARM(22578);
 SELECT PG_PREWARM(22593);
 SELECT PG_PREWARM(22514);
 SELECT PG_PREWARM(22573);
 SELECT PG_PREWARM(22574);
 SELECT PG_PREWARM(22527);
 SELECT PG_PREWARM(22528);
 SELECT PG_PREWARM(22529);
 SELECT PG_PREWARM(22587);
 SELECT PG_PREWARM(22588);
 SELECT PG_PREWARM(22589);
 SELECT PG_PREWARM(22602);
 SELECT PG_PREWARM(22623);
 SELECT PG_PREWARM(22638);
 SELECT PG_PREWARM(22633);
 SELECT PG_PREWARM(22608);
 SELECT PG_PREWARM(22653);
 SELECT PG_PREWARM(22668);
 SELECT PG_PREWARM(22603);
 SELECT PG_PREWARM(22604);
 SELECT PG_PREWARM(22617);
 SELECT PG_PREWARM(22618);
 SELECT PG_PREWARM(22632);
 SELECT PG_PREWARM(22634);
 SELECT PG_PREWARM(22647);
 SELECT PG_PREWARM(22648);
 SELECT PG_PREWARM(22649);
 SELECT PG_PREWARM(22662);
 SELECT PG_PREWARM(22663);
 SELECT PG_PREWARM(22664);
 SELECT PG_PREWARM(22677);
 SELECT PG_PREWARM(22678);
 SELECT PG_PREWARM(22679);
 SELECT PG_PREWARM(22713);
 SELECT PG_PREWARM(22728);
 SELECT PG_PREWARM(22683);
 SELECT PG_PREWARM(22698);
 SELECT PG_PREWARM(22692);
 SELECT PG_PREWARM(22693);
 SELECT PG_PREWARM(22694);
 SELECT PG_PREWARM(22707);
 SELECT PG_PREWARM(22708);
 SELECT PG_PREWARM(22709);
 SELECT PG_PREWARM(22722);
 SELECT PG_PREWARM(22723);
 SELECT PG_PREWARM(22724);
 SELECT PG_PREWARM(22737);
 SELECT PG_PREWARM(22738);
 SELECT PG_PREWARM(22739);
 SELECT PG_PREWARM(22318);
 SELECT PG_PREWARM(22319);
 SELECT PG_PREWARM(22393);
 SELECT PG_PREWARM(22394);
 SELECT PG_PREWARM(22423);
 SELECT PG_PREWARM(22424);
 SELECT PG_PREWARM(22439);
 SELECT PG_PREWARM(22558);
 SELECT PG_PREWARM(22559);
 SELECT PG_PREWARM(22619);
 SELECT PG_PREWARM(23188);
 SELECT PG_PREWARM(23189);
 SELECT PG_PREWARM(23200);
 SELECT PG_PREWARM(23190);
 SELECT PG_PREWARM(23201);
 SELECT PG_PREWARM(23191);
 SELECT PG_PREWARM(23202);
 SELECT PG_PREWARM(23192);
 SELECT PG_PREWARM(23193);
 SELECT PG_PREWARM(23197);
 SELECT PG_PREWARM(23194);
 SELECT PG_PREWARM(23199);
 SELECT PG_PREWARM(23195);
 SELECT PG_PREWARM(23198);
 SELECT PG_PREWARM(23196);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(23364);
 SELECT PG_PREWARM(23384);
 SELECT PG_PREWARM(23378);
 SELECT PG_PREWARM(23379);
 SELECT PG_PREWARM(23380);
 SELECT PG_PREWARM(23355);
 SELECT PG_PREWARM(23398);
 SELECT PG_PREWARM(23412);
 SELECT PG_PREWARM(23426);
 SELECT PG_PREWARM(23393);
 SELECT PG_PREWARM(23449);
 SELECT PG_PREWARM(23369);
 SELECT PG_PREWARM(23440);
 SELECT PG_PREWARM(23407);
 SELECT PG_PREWARM(23421);
 SELECT PG_PREWARM(23435);
 SELECT PG_PREWARM(23468);
 SELECT PG_PREWARM(23482);
 SELECT PG_PREWARM(23496);
 SELECT PG_PREWARM(23491);
 SELECT PG_PREWARM(23454);
 SELECT PG_PREWARM(23463);
 SELECT PG_PREWARM(23477);
 SELECT PG_PREWARM(23505);
 SELECT PG_PREWARM(23540);
 SELECT PG_PREWARM(23555);
 SELECT PG_PREWARM(23549);
 SELECT PG_PREWARM(23510);
 SELECT PG_PREWARM(23525);
 SELECT PG_PREWARM(23570);
 SELECT PG_PREWARM(23519);
 SELECT PG_PREWARM(23534);
 SELECT PG_PREWARM(23535);
 SELECT PG_PREWARM(23536);
 SELECT PG_PREWARM(23550);
 SELECT PG_PREWARM(23551);
 SELECT PG_PREWARM(23564);
 SELECT PG_PREWARM(23565);
 SELECT PG_PREWARM(23566);
 SELECT PG_PREWARM(23579);
 SELECT PG_PREWARM(23580);
 SELECT PG_PREWARM(23581);
 SELECT PG_PREWARM(23615);
 SELECT PG_PREWARM(23585);
 SELECT PG_PREWARM(23609);
 SELECT PG_PREWARM(23600);
 SELECT PG_PREWARM(23594);
 SELECT PG_PREWARM(23610);
 SELECT PG_PREWARM(23611);
 SELECT PG_PREWARM(23624);
 SELECT PG_PREWARM(23645);
 SELECT PG_PREWARM(23660);
 SELECT PG_PREWARM(23630);
 SELECT PG_PREWARM(23654);
 SELECT PG_PREWARM(23655);
 SELECT PG_PREWARM(23675);
 SELECT PG_PREWARM(23690);
 SELECT PG_PREWARM(23705);
 SELECT PG_PREWARM(23639);
 SELECT PG_PREWARM(23640);
 SELECT PG_PREWARM(23656);
 SELECT PG_PREWARM(23669);
 SELECT PG_PREWARM(23670);
 SELECT PG_PREWARM(23671);
 SELECT PG_PREWARM(23684);
 SELECT PG_PREWARM(23685);
 SELECT PG_PREWARM(23686);
 SELECT PG_PREWARM(23699);
 SELECT PG_PREWARM(23700);
 SELECT PG_PREWARM(23701);
 SELECT PG_PREWARM(23714);
 SELECT PG_PREWARM(23715);
 SELECT PG_PREWARM(23744);
 SELECT PG_PREWARM(23745);
 SELECT PG_PREWARM(23746);
 SELECT PG_PREWARM(23735);
 SELECT PG_PREWARM(23765);
 SELECT PG_PREWARM(23720);
 SELECT PG_PREWARM(23759);
 SELECT PG_PREWARM(23774);
 SELECT PG_PREWARM(23750);
 SELECT PG_PREWARM(23780);
 SELECT PG_PREWARM(23795);
 SELECT PG_PREWARM(23716);
 SELECT PG_PREWARM(23775);
 SELECT PG_PREWARM(23776);
 SELECT PG_PREWARM(23729);
 SELECT PG_PREWARM(23730);
 SELECT PG_PREWARM(23731);
 SELECT PG_PREWARM(23789);
 SELECT PG_PREWARM(23790);
 SELECT PG_PREWARM(23791);
 SELECT PG_PREWARM(23804);
 SELECT PG_PREWARM(23825);
 SELECT PG_PREWARM(23840);
 SELECT PG_PREWARM(23835);
 SELECT PG_PREWARM(23810);
 SELECT PG_PREWARM(23855);
 SELECT PG_PREWARM(23870);
 SELECT PG_PREWARM(23805);
 SELECT PG_PREWARM(23806);
 SELECT PG_PREWARM(23819);
 SELECT PG_PREWARM(23820);
 SELECT PG_PREWARM(23834);
 SELECT PG_PREWARM(23836);
 SELECT PG_PREWARM(23849);
 SELECT PG_PREWARM(23850);
 SELECT PG_PREWARM(23851);
 SELECT PG_PREWARM(23864);
 SELECT PG_PREWARM(23865);
 SELECT PG_PREWARM(23866);
 SELECT PG_PREWARM(23879);
 SELECT PG_PREWARM(23880);
 SELECT PG_PREWARM(23881);
 SELECT PG_PREWARM(23915);
 SELECT PG_PREWARM(23930);
 SELECT PG_PREWARM(23885);
 SELECT PG_PREWARM(23900);
 SELECT PG_PREWARM(23894);
 SELECT PG_PREWARM(23895);
 SELECT PG_PREWARM(23896);
 SELECT PG_PREWARM(23909);
 SELECT PG_PREWARM(23910);
 SELECT PG_PREWARM(23911);
 SELECT PG_PREWARM(23924);
 SELECT PG_PREWARM(23925);
 SELECT PG_PREWARM(23926);
 SELECT PG_PREWARM(23939);
 SELECT PG_PREWARM(23940);
 SELECT PG_PREWARM(23941);
 SELECT PG_PREWARM(23520);
 SELECT PG_PREWARM(23521);
 SELECT PG_PREWARM(23595);
 SELECT PG_PREWARM(23596);
 SELECT PG_PREWARM(23625);
 SELECT PG_PREWARM(23626);
 SELECT PG_PREWARM(23641);
 SELECT PG_PREWARM(23760);
 SELECT PG_PREWARM(23821);
 SELECT PG_PREWARM(24390);
 SELECT PG_PREWARM(24391);
 SELECT PG_PREWARM(24402);
 SELECT PG_PREWARM(24392);
 SELECT PG_PREWARM(24403);
 SELECT PG_PREWARM(24393);
 SELECT PG_PREWARM(24404);
 SELECT PG_PREWARM(24394);
 SELECT PG_PREWARM(24395);
 SELECT PG_PREWARM(24399);
 SELECT PG_PREWARM(24396);
 SELECT PG_PREWARM(24401);
 SELECT PG_PREWARM(24397);
 SELECT PG_PREWARM(24400);
 SELECT PG_PREWARM(24398);
 SELECT PG_PREWARM(23761);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 82939
********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 994
********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 9007
********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 183
********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 920112
********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 1873818
********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 2011
********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

UPDATE 8
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

UPDATE 920112
********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

UPDATE 919739
********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

UPDATE 1732386
********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

UPDATE 24170
********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

UPDATE 1357450
********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

UPDATE 82939
********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

UPDATE 79975
********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

UPDATE 305504
********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

UPDATE 32505
********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

UPDATE 84
********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

UPDATE 123
********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

UPDATE 202167
********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

UPDATE 443848
********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

UPDATE 1103
********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

UPDATE 0
********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

UPDATE 300702
********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

UPDATE 630451
********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

UPDATE 1215162
********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

UPDATE 922915
********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

UPDATE 950903
********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

UPDATE 955
********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

UPDATE 2501
********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(24595);
 SELECT PG_PREWARM(24609);
 SELECT PG_PREWARM(24623);
 SELECT PG_PREWARM(24637);
 SELECT PG_PREWARM(24651);
 SELECT PG_PREWARM(24566);
 SELECT PG_PREWARM(24586);
 SELECT PG_PREWARM(24580);
 SELECT PG_PREWARM(24581);
 SELECT PG_PREWARM(24582);
 SELECT PG_PREWARM(24557);
 SELECT PG_PREWARM(24600);
 SELECT PG_PREWARM(24614);
 SELECT PG_PREWARM(24628);
 SELECT PG_PREWARM(24571);
 SELECT PG_PREWARM(24642);
 SELECT PG_PREWARM(24665);
 SELECT PG_PREWARM(24679);
 SELECT PG_PREWARM(24693);
 SELECT PG_PREWARM(24707);
 SELECT PG_PREWARM(24670);
 SELECT PG_PREWARM(24684);
 SELECT PG_PREWARM(24698);
 SELECT PG_PREWARM(24656);
 SELECT PG_PREWARM(24721);
 SELECT PG_PREWARM(24736);
 SELECT PG_PREWARM(24737);
 SELECT PG_PREWARM(24738);
 SELECT PG_PREWARM(24751);
 SELECT PG_PREWARM(24752);
 SELECT PG_PREWARM(24753);
 SELECT PG_PREWARM(24766);
 SELECT PG_PREWARM(24767);
 SELECT PG_PREWARM(24768);
 SELECT PG_PREWARM(24781);
 SELECT PG_PREWARM(24782);
 SELECT PG_PREWARM(24783);
 SELECT PG_PREWARM(24742);
 SELECT PG_PREWARM(24757);
 SELECT PG_PREWARM(24712);
 SELECT PG_PREWARM(24727);
 SELECT PG_PREWARM(24772);
 SELECT PG_PREWARM(24796);
 SELECT PG_PREWARM(24811);
 SELECT PG_PREWARM(24812);
 SELECT PG_PREWARM(24813);
 SELECT PG_PREWARM(24826);
 SELECT PG_PREWARM(24817);
 SELECT PG_PREWARM(24787);
 SELECT PG_PREWARM(24802);
 SELECT PG_PREWARM(24841);
 SELECT PG_PREWARM(24842);
 SELECT PG_PREWARM(24856);
 SELECT PG_PREWARM(24847);
 SELECT PG_PREWARM(24857);
 SELECT PG_PREWARM(24858);
 SELECT PG_PREWARM(24871);
 SELECT PG_PREWARM(24872);
 SELECT PG_PREWARM(24873);
 SELECT PG_PREWARM(24886);
 SELECT PG_PREWARM(24887);
 SELECT PG_PREWARM(24888);
 SELECT PG_PREWARM(24901);
 SELECT PG_PREWARM(24862);
 SELECT PG_PREWARM(24902);
 SELECT PG_PREWARM(24903);
 SELECT PG_PREWARM(24916);
 SELECT PG_PREWARM(24917);
 SELECT PG_PREWARM(24832);
 SELECT PG_PREWARM(24877);
 SELECT PG_PREWARM(24892);
 SELECT PG_PREWARM(24907);
 SELECT PG_PREWARM(24918);
 SELECT PG_PREWARM(24961);
 SELECT PG_PREWARM(24976);
 SELECT PG_PREWARM(24977);
 SELECT PG_PREWARM(24978);
 SELECT PG_PREWARM(24931);
 SELECT PG_PREWARM(24932);
 SELECT PG_PREWARM(24933);
 SELECT PG_PREWARM(24991);
 SELECT PG_PREWARM(24992);
 SELECT PG_PREWARM(24993);
 SELECT PG_PREWARM(25006);
 SELECT PG_PREWARM(24946);
 SELECT PG_PREWARM(24947);
 SELECT PG_PREWARM(24948);
 SELECT PG_PREWARM(24937);
 SELECT PG_PREWARM(24967);
 SELECT PG_PREWARM(24922);
 SELECT PG_PREWARM(24952);
 SELECT PG_PREWARM(24982);
 SELECT PG_PREWARM(24997);
 SELECT PG_PREWARM(25007);
 SELECT PG_PREWARM(25008);
 SELECT PG_PREWARM(25021);
 SELECT PG_PREWARM(25022);
 SELECT PG_PREWARM(25036);
 SELECT PG_PREWARM(25037);
 SELECT PG_PREWARM(25038);
 SELECT PG_PREWARM(25051);
 SELECT PG_PREWARM(25027);
 SELECT PG_PREWARM(25052);
 SELECT PG_PREWARM(25053);
 SELECT PG_PREWARM(25066);
 SELECT PG_PREWARM(25067);
 SELECT PG_PREWARM(25068);
 SELECT PG_PREWARM(25081);
 SELECT PG_PREWARM(25082);
 SELECT PG_PREWARM(25083);
 SELECT PG_PREWARM(25042);
 SELECT PG_PREWARM(25012);
 SELECT PG_PREWARM(25057);
 SELECT PG_PREWARM(25072);
 SELECT PG_PREWARM(25096);
 SELECT PG_PREWARM(25097);
 SELECT PG_PREWARM(25098);
 SELECT PG_PREWARM(25117);
 SELECT PG_PREWARM(25111);
 SELECT PG_PREWARM(25112);
 SELECT PG_PREWARM(25113);
 SELECT PG_PREWARM(25126);
 SELECT PG_PREWARM(25127);
 SELECT PG_PREWARM(25128);
 SELECT PG_PREWARM(25141);
 SELECT PG_PREWARM(25142);
 SELECT PG_PREWARM(25143);
 SELECT PG_PREWARM(25132);
 SELECT PG_PREWARM(25087);
 SELECT PG_PREWARM(25102);
 SELECT PG_PREWARM(24722);
 SELECT PG_PREWARM(24723);
 SELECT PG_PREWARM(24797);
 SELECT PG_PREWARM(24798);
 SELECT PG_PREWARM(24827);
 SELECT PG_PREWARM(24828);
 SELECT PG_PREWARM(24843);
 SELECT PG_PREWARM(24962);
 SELECT PG_PREWARM(24963);
 SELECT PG_PREWARM(25023);
 SELECT PG_PREWARM(25598);
 SELECT PG_PREWARM(25599);
 SELECT PG_PREWARM(25610);
 SELECT PG_PREWARM(25600);
 SELECT PG_PREWARM(25611);
 SELECT PG_PREWARM(25601);
 SELECT PG_PREWARM(25612);
 SELECT PG_PREWARM(25602);
 SELECT PG_PREWARM(25603);
 SELECT PG_PREWARM(25607);
 SELECT PG_PREWARM(25604);
 SELECT PG_PREWARM(25609);
 SELECT PG_PREWARM(25605);
 SELECT PG_PREWARM(25608);
 SELECT PG_PREWARM(25606);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

CREATE EXTENSION
********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

CREATE SERVER
********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

CREATE EXTENSION
********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/graph_databases/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(25933);
 SELECT PG_PREWARM(25953);
 SELECT PG_PREWARM(25947);
 SELECT PG_PREWARM(25948);
 SELECT PG_PREWARM(25949);
 SELECT PG_PREWARM(25924);
 SELECT PG_PREWARM(25967);
 SELECT PG_PREWARM(25981);
 SELECT PG_PREWARM(25976);
 SELECT PG_PREWARM(25990);
 SELECT PG_PREWARM(25938);
 SELECT PG_PREWARM(25995);
 SELECT PG_PREWARM(26009);
 SELECT PG_PREWARM(25962);
 SELECT PG_PREWARM(26004);
 SELECT PG_PREWARM(26018);
 SELECT PG_PREWARM(26037);
 SELECT PG_PREWARM(26051);
 SELECT PG_PREWARM(26074);
 SELECT PG_PREWARM(26023);
 SELECT PG_PREWARM(26065);
 SELECT PG_PREWARM(26032);
 SELECT PG_PREWARM(26046);
 SELECT PG_PREWARM(26060);
 SELECT PG_PREWARM(26109);
 SELECT PG_PREWARM(26124);
 SELECT PG_PREWARM(26105);
 SELECT PG_PREWARM(26079);
 SELECT PG_PREWARM(26094);
 SELECT PG_PREWARM(26139);
 SELECT PG_PREWARM(26088);
 SELECT PG_PREWARM(26103);
 SELECT PG_PREWARM(26104);
 SELECT PG_PREWARM(26118);
 SELECT PG_PREWARM(26119);
 SELECT PG_PREWARM(26120);
 SELECT PG_PREWARM(26133);
 SELECT PG_PREWARM(26134);
 SELECT PG_PREWARM(26135);
 SELECT PG_PREWARM(26148);
 SELECT PG_PREWARM(26149);
 SELECT PG_PREWARM(26150);
 SELECT PG_PREWARM(26184);
 SELECT PG_PREWARM(26154);
 SELECT PG_PREWARM(26163);
 SELECT PG_PREWARM(26169);
 SELECT PG_PREWARM(26178);
 SELECT PG_PREWARM(26179);
 SELECT PG_PREWARM(26180);
 SELECT PG_PREWARM(26193);
 SELECT PG_PREWARM(26194);
 SELECT PG_PREWARM(26229);
 SELECT PG_PREWARM(26244);
 SELECT PG_PREWARM(26238);
 SELECT PG_PREWARM(26199);
 SELECT PG_PREWARM(26214);
 SELECT PG_PREWARM(26259);
 SELECT PG_PREWARM(26274);
 SELECT PG_PREWARM(26208);
 SELECT PG_PREWARM(26223);
 SELECT PG_PREWARM(26224);
 SELECT PG_PREWARM(26225);
 SELECT PG_PREWARM(26239);
 SELECT PG_PREWARM(26240);
 SELECT PG_PREWARM(26253);
 SELECT PG_PREWARM(26254);
 SELECT PG_PREWARM(26255);
 SELECT PG_PREWARM(26268);
 SELECT PG_PREWARM(26269);
 SELECT PG_PREWARM(26270);
 SELECT PG_PREWARM(26283);
 SELECT PG_PREWARM(26284);
 SELECT PG_PREWARM(26285);
 SELECT PG_PREWARM(26313);
 SELECT PG_PREWARM(26314);
 SELECT PG_PREWARM(26315);
 SELECT PG_PREWARM(26304);
 SELECT PG_PREWARM(26334);
 SELECT PG_PREWARM(26289);
 SELECT PG_PREWARM(26364);
 SELECT PG_PREWARM(26343);
 SELECT PG_PREWARM(26344);
 SELECT PG_PREWARM(26319);
 SELECT PG_PREWARM(26349);
 SELECT PG_PREWARM(26379);
 SELECT PG_PREWARM(26328);
 SELECT PG_PREWARM(26345);
 SELECT PG_PREWARM(26298);
 SELECT PG_PREWARM(26299);
 SELECT PG_PREWARM(26300);
 SELECT PG_PREWARM(26358);
 SELECT PG_PREWARM(26359);
 SELECT PG_PREWARM(26360);
 SELECT PG_PREWARM(26373);
 SELECT PG_PREWARM(26374);
 SELECT PG_PREWARM(26375);
 SELECT PG_PREWARM(26409);
 SELECT PG_PREWARM(26424);
 SELECT PG_PREWARM(26439);
 SELECT PG_PREWARM(26403);
 SELECT PG_PREWARM(26404);
 SELECT PG_PREWARM(26394);
 SELECT PG_PREWARM(26454);
 SELECT PG_PREWARM(26469);
 SELECT PG_PREWARM(26388);
 SELECT PG_PREWARM(26389);
 SELECT PG_PREWARM(26418);
 SELECT PG_PREWARM(26419);
 SELECT PG_PREWARM(26420);
 SELECT PG_PREWARM(26433);
 SELECT PG_PREWARM(26434);
 SELECT PG_PREWARM(26435);
 SELECT PG_PREWARM(26448);
 SELECT PG_PREWARM(26449);
 SELECT PG_PREWARM(26450);
 SELECT PG_PREWARM(26463);
 SELECT PG_PREWARM(26464);
 SELECT PG_PREWARM(26465);
 SELECT PG_PREWARM(26478);
 SELECT PG_PREWARM(26499);
 SELECT PG_PREWARM(26484);
 SELECT PG_PREWARM(26089);
 SELECT PG_PREWARM(26090);
 SELECT PG_PREWARM(26479);
 SELECT PG_PREWARM(26480);
 SELECT PG_PREWARM(26493);
 SELECT PG_PREWARM(26494);
 SELECT PG_PREWARM(26495);
 SELECT PG_PREWARM(26508);
 SELECT PG_PREWARM(26509);
 SELECT PG_PREWARM(26510);
 SELECT PG_PREWARM(26164);
 SELECT PG_PREWARM(26165);
 SELECT PG_PREWARM(26195);
 SELECT PG_PREWARM(26209);
 SELECT PG_PREWARM(26210);
 SELECT PG_PREWARM(26329);
 SELECT PG_PREWARM(26330);
 SELECT PG_PREWARM(26390);
 SELECT PG_PREWARM(26405);
 SELECT PG_PREWARM(26959);
 SELECT PG_PREWARM(26960);
 SELECT PG_PREWARM(26971);
 SELECT PG_PREWARM(26961);
 SELECT PG_PREWARM(26972);
 SELECT PG_PREWARM(26962);
 SELECT PG_PREWARM(26973);
 SELECT PG_PREWARM(26963);
 SELECT PG_PREWARM(26964);
 SELECT PG_PREWARM(26968);
 SELECT PG_PREWARM(26965);
 SELECT PG_PREWARM(26970);
 SELECT PG_PREWARM(26966);
 SELECT PG_PREWARM(26969);
 SELECT PG_PREWARM(26967);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/graph_databases/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(27135);
 SELECT PG_PREWARM(27155);
 SELECT PG_PREWARM(27149);
 SELECT PG_PREWARM(27150);
 SELECT PG_PREWARM(27151);
 SELECT PG_PREWARM(27126);
 SELECT PG_PREWARM(27169);
 SELECT PG_PREWARM(27183);
 SELECT PG_PREWARM(27197);
 SELECT PG_PREWARM(27164);
 SELECT PG_PREWARM(27220);
 SELECT PG_PREWARM(27140);
 SELECT PG_PREWARM(27211);
 SELECT PG_PREWARM(27178);
 SELECT PG_PREWARM(27192);
 SELECT PG_PREWARM(27206);
 SELECT PG_PREWARM(27239);
 SELECT PG_PREWARM(27253);
 SELECT PG_PREWARM(27267);
 SELECT PG_PREWARM(27262);
 SELECT PG_PREWARM(27225);
 SELECT PG_PREWARM(27234);
 SELECT PG_PREWARM(27248);
 SELECT PG_PREWARM(27276);
 SELECT PG_PREWARM(27311);
 SELECT PG_PREWARM(27326);
 SELECT PG_PREWARM(27307);
 SELECT PG_PREWARM(27281);
 SELECT PG_PREWARM(27296);
 SELECT PG_PREWARM(27341);
 SELECT PG_PREWARM(27290);
 SELECT PG_PREWARM(27305);
 SELECT PG_PREWARM(27306);
 SELECT PG_PREWARM(27320);
 SELECT PG_PREWARM(27321);
 SELECT PG_PREWARM(27322);
 SELECT PG_PREWARM(27335);
 SELECT PG_PREWARM(27336);
 SELECT PG_PREWARM(27337);
 SELECT PG_PREWARM(27350);
 SELECT PG_PREWARM(27351);
 SELECT PG_PREWARM(27352);
 SELECT PG_PREWARM(27386);
 SELECT PG_PREWARM(27356);
 SELECT PG_PREWARM(27365);
 SELECT PG_PREWARM(27371);
 SELECT PG_PREWARM(27380);
 SELECT PG_PREWARM(27381);
 SELECT PG_PREWARM(27382);
 SELECT PG_PREWARM(27395);
 SELECT PG_PREWARM(27396);
 SELECT PG_PREWARM(27431);
 SELECT PG_PREWARM(27446);
 SELECT PG_PREWARM(27401);
 SELECT PG_PREWARM(27440);
 SELECT PG_PREWARM(27416);
 SELECT PG_PREWARM(27461);
 SELECT PG_PREWARM(27476);
 SELECT PG_PREWARM(27410);
 SELECT PG_PREWARM(27411);
 SELECT PG_PREWARM(27425);
 SELECT PG_PREWARM(27426);
 SELECT PG_PREWARM(27427);
 SELECT PG_PREWARM(27441);
 SELECT PG_PREWARM(27442);
 SELECT PG_PREWARM(27455);
 SELECT PG_PREWARM(27456);
 SELECT PG_PREWARM(27457);
 SELECT PG_PREWARM(27470);
 SELECT PG_PREWARM(27471);
 SELECT PG_PREWARM(27472);
 SELECT PG_PREWARM(27485);
 SELECT PG_PREWARM(27486);
 SELECT PG_PREWARM(27487);
 SELECT PG_PREWARM(27551);
 SELECT PG_PREWARM(27515);
 SELECT PG_PREWARM(27516);
 SELECT PG_PREWARM(27517);
 SELECT PG_PREWARM(27506);
 SELECT PG_PREWARM(27536);
 SELECT PG_PREWARM(27491);
 SELECT PG_PREWARM(27500);
 SELECT PG_PREWARM(27521);
 SELECT PG_PREWARM(27566);
 SELECT PG_PREWARM(27530);
 SELECT PG_PREWARM(27545);
 SELECT PG_PREWARM(27546);
 SELECT PG_PREWARM(27547);
 SELECT PG_PREWARM(27501);
 SELECT PG_PREWARM(27502);
 SELECT PG_PREWARM(27560);
 SELECT PG_PREWARM(27561);
 SELECT PG_PREWARM(27562);
 SELECT PG_PREWARM(27575);
 SELECT PG_PREWARM(27576);
 SELECT PG_PREWARM(27577);
 SELECT PG_PREWARM(27596);
 SELECT PG_PREWARM(27611);
 SELECT PG_PREWARM(27626);
 SELECT PG_PREWARM(27581);
 SELECT PG_PREWARM(27590);
 SELECT PG_PREWARM(27621);
 SELECT PG_PREWARM(27641);
 SELECT PG_PREWARM(27656);
 SELECT PG_PREWARM(27591);
 SELECT PG_PREWARM(27605);
 SELECT PG_PREWARM(27606);
 SELECT PG_PREWARM(27607);
 SELECT PG_PREWARM(27620);
 SELECT PG_PREWARM(27622);
 SELECT PG_PREWARM(27635);
 SELECT PG_PREWARM(27636);
 SELECT PG_PREWARM(27637);
 SELECT PG_PREWARM(27650);
 SELECT PG_PREWARM(27651);
 SELECT PG_PREWARM(27652);
 SELECT PG_PREWARM(27665);
 SELECT PG_PREWARM(27666);
 SELECT PG_PREWARM(27667);
 SELECT PG_PREWARM(27686);
 SELECT PG_PREWARM(27701);
 SELECT PG_PREWARM(27671);
 SELECT PG_PREWARM(27680);
 SELECT PG_PREWARM(27681);
 SELECT PG_PREWARM(27682);
 SELECT PG_PREWARM(27695);
 SELECT PG_PREWARM(27696);
 SELECT PG_PREWARM(27697);
 SELECT PG_PREWARM(27710);
 SELECT PG_PREWARM(27711);
 SELECT PG_PREWARM(27712);
 SELECT PG_PREWARM(27291);
 SELECT PG_PREWARM(27292);
 SELECT PG_PREWARM(27366);
 SELECT PG_PREWARM(27367);
 SELECT PG_PREWARM(27397);
 SELECT PG_PREWARM(27412);
 SELECT PG_PREWARM(27531);
 SELECT PG_PREWARM(27532);
 SELECT PG_PREWARM(27592);
 SELECT PG_PREWARM(28161);
 SELECT PG_PREWARM(28162);
 SELECT PG_PREWARM(28163);
 SELECT PG_PREWARM(28174);
 SELECT PG_PREWARM(28164);
 SELECT PG_PREWARM(28175);
 SELECT PG_PREWARM(28165);
 SELECT PG_PREWARM(28166);
 SELECT PG_PREWARM(28170);
 SELECT PG_PREWARM(28167);
 SELECT PG_PREWARM(28172);
 SELECT PG_PREWARM(28168);
 SELECT PG_PREWARM(28171);
 SELECT PG_PREWARM(28169);
 SELECT PG_PREWARM(28173);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/ldbc_benchmark/datagen_out/social_network/dynamic:/home/s166098/ldbc_benchmark/datagen_out/social_network/static/dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP TABLE IF EXISTS c14_weight;
**************************

DROP TABLE
********* QUERY **********
CREATE UNLOGGED TABLE c14_weight(p1 INT8, p2 INT8, weight double precision);
**************************

CREATE TABLE
********* QUERY **********
INSERT INTO c14_weight
    SELECT p1, p2, SUM(inc) FROM (
        SELECT
            CASE when rep_creator < org_creator
                THEN rep_creator ELSE org_creator END AS p1,
            CASE when rep_creator < org_creator
                THEN org_creator ELSE rep_creator END AS p2,
            inc::int8
        FROM
		(
            MATCH
            (p1:Person)<-[:hasCreatorComment]-(c)-[:replyOfPost]->(m)-[:hasCreatorPost]->(p2:Person)
			, (p1:Person)-[:knows]->(p2:Person)
			RETURN p1.id AS rep_creator, p2.id AS org_creator, 1.0 AS inc
            UNION ALL
            MATCH
            (p1:Person)<-[:hasCreatorComment]-(c)-[:replyOfComment]->(m)-[:hasCreatorComment]->(p2:Person)
			, (p1:Person)-[:knows]->(p2:Person)
			RETURN p1.id AS rep_creator, p2.id AS org_creator, 0.5
        ) AS x
    ) AS x
    GROUP BY p1, p2;
**************************

********* QUERY **********
CREATE UNIQUE INDEX ON c14_weight(p1, p2);
**************************

CREATE INDEX
********* QUERY **********
ALTER TABLE c14_weight SET LOGGED;
**************************

ALTER TABLE
********* QUERY **********
create or replace function c7(likes jsonb[])
returns jsonb as $$
declare
	elem jsonb;
	latestLikeTime int8;
	latestLikeId int8;
	latestLike jsonb;
begin
	latestLikeTime := 0;
	foreach elem in array likes
	loop
		if (elem->>'likeTime')::int8 > latestLikeTime
		then
			latestLikeTime := (elem->>'likeTime')::int8;
			latestLikeId := (elem->>'id')::int8;
			latestLike := elem;
		elsif (elem->>'likeTime')::int8 = latestLikeTime
		then
			if (elem->>'id')::int8 < latestLikeId
			then
				latestLikeTime := (elem->>'likeTime')::int8;
				latestLikeId := (elem->>'id')::int8;
				latestLike := elem;
			end if;
		end if;
	end loop;

	return latestLike;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
set graph_path = ldbc;
**************************

SET
********* QUERY **********
create or replace function c10_fc(post_ids int8[], person_id int8)
returns int8 as $$
	select count(*)
	from unnest(post_ids) x (id)
	where exists (select 1
				  from (match (post:Post)-[:hasTagPost]->(:Tag)<-[:hasInterest]-(p:Person)
				  where post.id = to_jsonb(x.id) and p.id = person_id return 1) y);
$$ language sql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function upd_reply_weight (p1id bigint, postid bigint, commentid bigint)
returns int as $$
declare
	p2id int8;
	tmp int8;
	reply int8;
  	inc double precision;
begin
	match (m:message)-[:hasCreator]->(creator:Person)
	where m.id = postid + commentid + 1
	return creator.id into p2id;
	if not found then
		return 0;
	end if;
	if postid <> -1 then
		inc := 1;
 	else
 		inc := 0.5;
	end if;
  	if p1id > p2id then
		tmp := p2id;
		p2id := p1id;
		p1id := tmp;
	end if;
  	if not exists ((:person {id: p1id})-[:knows]->(:person {id: p2id})) then
		return 0;
	end if;
	if exists (select 1 from c14_weight where p1 = p1id and p2 = p2id for update) then
    	update c14_weight set weight = weight + inc where p1 = p1id and p2 = p2id;
	else
    	insert into c14_weight values (p1id, p2id, inc);
	end if;
	return 1;
end
$$ language plpgsql;
**************************

********* QUERY **********
create or replace function upd_weight(p1id int8, p2id int8)
returns double precision as $$
declare
  a double precision;
  b double precision;
  c double precision;
  d double precision;
begin
	SELECT SUM(1.0) INTO a
	FROM (SELECT 1
	FROM (
		match (p1:Person)<-[:hasCreatorComment]-(:"Comment")-[:replyOfPost]->(:Post)-[:hasCreatorPost]->(p2:Person)
		where p1.id = p1id and p2.id = p2id
		RETURN 1 AS col1) AS dummy
	FOR UPDATE) AS dummy;

	SELECT SUM(1.0) INTO b
	FROM (SELECT 1
	FROM (
		match (p1:Person)<-[:hasCreatorComment]-(:"Comment")-[:replyOfPost]->(:Post)-[:hasCreatorPost]->(p2:Person)
		where p1.id = p2id and p2.id = p1id
		RETURN 1 AS col1) AS dummy
	FOR UPDATE) AS dummy;

	SELECT SUM(0.5) INTO c
	FROM (SELECT 1
	FROM (
		match (p1:Person)<-[:hasCreatorComment]-(:"Comment")-[:replyOfComment]->(:"Comment")-[:hasCreatorComment]->(p2:Person)
		where p1.id = p1id and p2.id = p2id
		RETURN 1 AS col1) AS dummy
	FOR UPDATE) AS dummy;

	SELECT SUM(0.5) INTO d
	FROM (SELECT 1
	FROM (
		match (p1:Person)<-[:hasCreatorComment]-(:"Comment")-[:replyOfComment]->(:"Comment")-[:hasCreatorComment]->(p2:Person)
		where p1.id = p2id and p2.id = p1id
		RETURN 1 AS col1) AS dummy
	FOR UPDATE) AS dummy;

	return coalesce(a, 0) + coalesce(b, 0) + coalesce(c, 0) + coalesce(d);
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function add_weight (p1 int8, p2 int8)
returns int as $$
declare
	cw double precision;
begin
 	cw := upd_weight(p1, p2);
	if cw > 0.0 then
		if p1 < p2 then
			insert into c14_weight values (p1, p2, cw);
		else
			insert into c14_weight values (p1, p2, cw);
		end if;
	end if;
	return 1;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function get_weight (node_ids int8[])
returns double precision as $$
declare
	all_weight double precision;
	small_ids int8[];
	big_ids int8[];
	small int8;
	big int8;
	tmp int8;
begin
	all_weight := 0.0;
	for i in 1..array_length(node_ids, 1) - 1 loop
		small = node_ids[i];
		big = node_ids[i+1];
		if small > big then
			tmp := small;
			small := big;
			big := tmp;
		end if;
		small_ids := array_append(small_ids, small);
		big_ids := array_append(big_ids, big);
	end loop;
	select sum((select weight
			from c14_weight where p1 = s and p2 = b)) into all_weight
	from unnest(small_ids, big_ids) as x (s, b);
	return all_weight;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function get_weight2 (node_ids vertex[])
returns double precision as $$
declare
	all_weight double precision;
	small_ids int8[];
	big_ids int8[];
	small int8;
	big int8;
	tmp int8;
begin
	all_weight := 0.0;
	for i in 1..array_length(node_ids, 1) - 1 loop
		small = CAST(node_ids[i].properties::jsonb->'id' AS int8);
		big = CAST(node_ids[i+1].properties::jsonb->'id' AS int8);
		if small > big then
			tmp := small;
			small := big;
			big := tmp;
		end if;
		small_ids := array_append(small_ids, small);
		big_ids := array_append(big_ids, big);
	end loop;
	select sum((select weight
			from c14_weight where p1 = s and p2 = b)) into all_weight
	from unnest(small_ids, big_ids) as x (s, b);
	return all_weight;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function extract_ids(node_ids int8[])
returns jsonb as $$
declare
	id int8;
	arr int8[];
begin
	foreach id in array node_ids
	loop
		arr = array_append(arr, id);
	end loop;

	return array_to_json(arr)::jsonb;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function extract_ids2(node_ids vertex[])
returns jsonb as $$
declare
        id vertex;
        arr int8[];
begin
        foreach id in array node_ids
        loop
                arr = array_append(arr, CAST(id.properties::jsonb->'id' AS int8));
        end loop;
        
        return array_to_json(arr)::jsonb;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
CREATE OR REPLACE FUNCTION knows_shortestpaths(startnode graphid, endnode graphid)
  RETURNS TABLE(paths graphid[]) AS
$BODY$
DECLARE
    rowcount int;
    iter int;
BEGIN
    -- Create a temporary table for storing the estimates as the algorithm runs
    CREATE TEMP TABLE inter_result1
    (
        nid graphid,
        path graphid[]
    ) ON COMMIT DROP;

    CREATE TEMP TABLE inter_result2
    (
        nid graphid,
        path graphid[]
    ) ON COMMIT DROP;

    INSERT INTO inter_result1 VALUES (startnode, ARRAY[startnode]);
    iter := 0;

    -- Run the algorithm until we decide that we are finished
    LOOP
        IF iter % 2 = 0 THEN
            INSERT INTO inter_result2
                SELECT distinct e."end", i.path || e."end"
                FROM ldbc.knows AS e, inter_result1 AS i
                WHERE nid = e.start AND e."end" = endnode;
        ELSE
            INSERT INTO inter_result1
                SELECT distinct e."end", i.path || e."end"
                FROM ldbc.knows AS e, inter_result2 AS i
                WHERE nid = e.start AND e."end" = endnode;
        END IF;

        GET DIAGNOSTICS rowcount = ROW_COUNT;
        IF rowcount != 0 THEN EXIT; END IF;

        IF iter % 2 = 0 THEN
            INSERT INTO inter_result2
                SELECT distinct e."end", i.path || e."end"
                FROM ldbc.knows AS e, inter_result1 AS i
				WHERE nid = e.start AND NOT (i.path @> array[e."end"]);
        ELSE
            INSERT INTO inter_result1
                SELECT distinct e."end", i.path || e."end"
                FROM ldbc.knows AS e, inter_result2 AS i
				WHERE nid = e.start AND NOT (i.path @> array[e."end"]);
        END IF;

        GET DIAGNOSTICS rowcount = ROW_COUNT;
        IF rowcount = 0 THEN EXIT; END IF;

        IF iter % 2 = 0 THEN
            TRUNCATE TABLE inter_result1;
        ELSE
            TRUNCATE TABLE inter_result2;
        END IF;

        iter := iter + 1;
    END LOOP;

    IF iter % 2 = 0 THEN
        RETURN QUERY SELECT path FROM inter_result2;
    ELSE
        RETURN QUERY SELECT path FROM inter_result1;
    END IF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function conv_person_id(graphids graphid[])
returns int8[] as $$
declare
	gid graphid;
	pid int8;
	ret int8[];
begin
	foreach gid in array graphids
	loop
		match (p:Person) where id(p) = gid return p.id into pid;
		ret := array_append(ret, pid);
	end loop;
	return ret;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function shortestpath_vertex_ids(p1 vertex, p2 vertex)
returns int8[] as $$
declare
	graphids graphid[];
begin
	if p1.id = p2.id then
		return array[(p1.properties->>'id')::int8];
	end if;
	select paths into graphids from knows_shortestpaths(id(p1), id(p2)) limit 1;
	if not found then
		return NULL;
	end if;
	return conv_person_id(graphids);
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
create or replace function allshortestpath_vertex_ids(p1_id int8, p2_id int8)
returns table(vertex_ids int8[]) as $$
declare
	graphids graphid[];
	g1 graphid;
	g2 graphid;
begin
	if p1_id = p2_id then
		vertex_ids := array_append(vertex_ids, p1_id);
		return next;
		return;
	end if;

	match (p1:Person), (p2:Person)
	where p1.id = p1_id and p2.id = p2_id return id(p1), id(p2)
	into g1, g2;

	for graphids in select paths from knows_shortestpaths(g1, g2)
	loop
		vertex_ids := conv_person_id(graphids);
		return next;
	end loop;
	return;
end
$$ language plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/graph_databases/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(29517);
 SELECT PG_PREWARM(29512);
 SELECT PG_PREWARM(29503);
 SELECT PG_PREWARM(29545);
 SELECT PG_PREWARM(29560);
 SELECT PG_PREWARM(29575);
 SELECT PG_PREWARM(29526);
 SELECT PG_PREWARM(29570);
 SELECT PG_PREWARM(29531);
 SELECT PG_PREWARM(29590);
 SELECT PG_PREWARM(29605);
 SELECT PG_PREWARM(29540);
 SELECT PG_PREWARM(29554);
 SELECT PG_PREWARM(29555);
 SELECT PG_PREWARM(29569);
 SELECT PG_PREWARM(29571);
 SELECT PG_PREWARM(29584);
 SELECT PG_PREWARM(29585);
 SELECT PG_PREWARM(29586);
 SELECT PG_PREWARM(29599);
 SELECT PG_PREWARM(29600);
 SELECT PG_PREWARM(29601);
 SELECT PG_PREWARM(29614);
 SELECT PG_PREWARM(29615);
 SELECT PG_PREWARM(29399);
 SELECT PG_PREWARM(29419);
 SELECT PG_PREWARM(29413);
 SELECT PG_PREWARM(29414);
 SELECT PG_PREWARM(29415);
 SELECT PG_PREWARM(29390);
 SELECT PG_PREWARM(29433);
 SELECT PG_PREWARM(29447);
 SELECT PG_PREWARM(29461);
 SELECT PG_PREWARM(29489);
 SELECT PG_PREWARM(29456);
 SELECT PG_PREWARM(29470);
 SELECT PG_PREWARM(29404);
 SELECT PG_PREWARM(29475);
 SELECT PG_PREWARM(29428);
 SELECT PG_PREWARM(29442);
 SELECT PG_PREWARM(29484);
 SELECT PG_PREWARM(29498);
 SELECT PG_PREWARM(29635);
 SELECT PG_PREWARM(29650);
 SELECT PG_PREWARM(29665);
 SELECT PG_PREWARM(29616);
 SELECT PG_PREWARM(29659);
 SELECT PG_PREWARM(29620);
 SELECT PG_PREWARM(29680);
 SELECT PG_PREWARM(29695);
 SELECT PG_PREWARM(29629);
 SELECT PG_PREWARM(29644);
 SELECT PG_PREWARM(29645);
 SELECT PG_PREWARM(29646);
 SELECT PG_PREWARM(29660);
 SELECT PG_PREWARM(29661);
 SELECT PG_PREWARM(29674);
 SELECT PG_PREWARM(29675);
 SELECT PG_PREWARM(29676);
 SELECT PG_PREWARM(29689);
 SELECT PG_PREWARM(29690);
 SELECT PG_PREWARM(29691);
 SELECT PG_PREWARM(29704);
 SELECT PG_PREWARM(29705);
 SELECT PG_PREWARM(29706);
 SELECT PG_PREWARM(29725);
 SELECT PG_PREWARM(29740);
 SELECT PG_PREWARM(29785);
 SELECT PG_PREWARM(29736);
 SELECT PG_PREWARM(29710);
 SELECT PG_PREWARM(29779);
 SELECT PG_PREWARM(29780);
 SELECT PG_PREWARM(29781);
 SELECT PG_PREWARM(29770);
 SELECT PG_PREWARM(29755);
 SELECT PG_PREWARM(29719);
 SELECT PG_PREWARM(29720);
 SELECT PG_PREWARM(29734);
 SELECT PG_PREWARM(29735);
 SELECT PG_PREWARM(29749);
 SELECT PG_PREWARM(29750);
 SELECT PG_PREWARM(29751);
 SELECT PG_PREWARM(29794);
 SELECT PG_PREWARM(29795);
 SELECT PG_PREWARM(29796);
 SELECT PG_PREWARM(29764);
 SELECT PG_PREWARM(29765);
 SELECT PG_PREWARM(29766);
 SELECT PG_PREWARM(29815);
 SELECT PG_PREWARM(29830);
 SELECT PG_PREWARM(29845);
 SELECT PG_PREWARM(29800);
 SELECT PG_PREWARM(29809);
 SELECT PG_PREWARM(29839);
 SELECT PG_PREWARM(29860);
 SELECT PG_PREWARM(29875);
 SELECT PG_PREWARM(29810);
 SELECT PG_PREWARM(29824);
 SELECT PG_PREWARM(29825);
 SELECT PG_PREWARM(29826);
 SELECT PG_PREWARM(29840);
 SELECT PG_PREWARM(29841);
 SELECT PG_PREWARM(29854);
 SELECT PG_PREWARM(29855);
 SELECT PG_PREWARM(29856);
 SELECT PG_PREWARM(29869);
 SELECT PG_PREWARM(29870);
 SELECT PG_PREWARM(29871);
 SELECT PG_PREWARM(29884);
 SELECT PG_PREWARM(29885);
 SELECT PG_PREWARM(29886);
 SELECT PG_PREWARM(29905);
 SELECT PG_PREWARM(29920);
 SELECT PG_PREWARM(29935);
 SELECT PG_PREWARM(29899);
 SELECT PG_PREWARM(29930);
 SELECT PG_PREWARM(29890);
 SELECT PG_PREWARM(29950);
 SELECT PG_PREWARM(29965);
 SELECT PG_PREWARM(29914);
 SELECT PG_PREWARM(29915);
 SELECT PG_PREWARM(29916);
 SELECT PG_PREWARM(29929);
 SELECT PG_PREWARM(29931);
 SELECT PG_PREWARM(29944);
 SELECT PG_PREWARM(29945);
 SELECT PG_PREWARM(29946);
 SELECT PG_PREWARM(29959);
 SELECT PG_PREWARM(29960);
 SELECT PG_PREWARM(29961);
 SELECT PG_PREWARM(29974);
 SELECT PG_PREWARM(29975);
 SELECT PG_PREWARM(29976);
 SELECT PG_PREWARM(29556);
 SELECT PG_PREWARM(29630);
 SELECT PG_PREWARM(29631);
 SELECT PG_PREWARM(29721);
 SELECT PG_PREWARM(29811);
 SELECT PG_PREWARM(29900);
 SELECT PG_PREWARM(29901);
 SELECT PG_PREWARM(30425);
 SELECT PG_PREWARM(30426);
 SELECT PG_PREWARM(30437);
 SELECT PG_PREWARM(30427);
 SELECT PG_PREWARM(30438);
 SELECT PG_PREWARM(30428);
 SELECT PG_PREWARM(30439);
 SELECT PG_PREWARM(30429);
 SELECT PG_PREWARM(30430);
 SELECT PG_PREWARM(30434);
 SELECT PG_PREWARM(30431);
 SELECT PG_PREWARM(30436);
 SELECT PG_PREWARM(30432);
 SELECT PG_PREWARM(30435);
 SELECT PG_PREWARM(30433);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/graph_databases/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(30601);
 SELECT PG_PREWARM(30621);
 SELECT PG_PREWARM(30615);
 SELECT PG_PREWARM(30616);
 SELECT PG_PREWARM(30617);
 SELECT PG_PREWARM(30592);
 SELECT PG_PREWARM(30635);
 SELECT PG_PREWARM(30649);
 SELECT PG_PREWARM(30663);
 SELECT PG_PREWARM(30630);
 SELECT PG_PREWARM(30686);
 SELECT PG_PREWARM(30606);
 SELECT PG_PREWARM(30677);
 SELECT PG_PREWARM(30644);
 SELECT PG_PREWARM(30658);
 SELECT PG_PREWARM(30672);
 SELECT PG_PREWARM(30705);
 SELECT PG_PREWARM(30719);
 SELECT PG_PREWARM(30733);
 SELECT PG_PREWARM(30728);
 SELECT PG_PREWARM(30691);
 SELECT PG_PREWARM(30700);
 SELECT PG_PREWARM(30714);
 SELECT PG_PREWARM(30742);
 SELECT PG_PREWARM(30777);
 SELECT PG_PREWARM(30792);
 SELECT PG_PREWARM(30786);
 SELECT PG_PREWARM(30747);
 SELECT PG_PREWARM(30762);
 SELECT PG_PREWARM(30807);
 SELECT PG_PREWARM(30756);
 SELECT PG_PREWARM(30771);
 SELECT PG_PREWARM(30772);
 SELECT PG_PREWARM(30773);
 SELECT PG_PREWARM(30787);
 SELECT PG_PREWARM(30788);
 SELECT PG_PREWARM(30801);
 SELECT PG_PREWARM(30802);
 SELECT PG_PREWARM(30803);
 SELECT PG_PREWARM(30816);
 SELECT PG_PREWARM(30817);
 SELECT PG_PREWARM(30818);
 SELECT PG_PREWARM(30852);
 SELECT PG_PREWARM(30822);
 SELECT PG_PREWARM(30846);
 SELECT PG_PREWARM(30837);
 SELECT PG_PREWARM(30831);
 SELECT PG_PREWARM(30847);
 SELECT PG_PREWARM(30848);
 SELECT PG_PREWARM(30861);
 SELECT PG_PREWARM(30897);
 SELECT PG_PREWARM(30867);
 SELECT PG_PREWARM(30891);
 SELECT PG_PREWARM(30892);
 SELECT PG_PREWARM(30882);
 SELECT PG_PREWARM(30912);
 SELECT PG_PREWARM(30927);
 SELECT PG_PREWARM(30942);
 SELECT PG_PREWARM(30876);
 SELECT PG_PREWARM(30877);
 SELECT PG_PREWARM(30893);
 SELECT PG_PREWARM(30906);
 SELECT PG_PREWARM(30907);
 SELECT PG_PREWARM(30908);
 SELECT PG_PREWARM(30921);
 SELECT PG_PREWARM(30922);
 SELECT PG_PREWARM(30923);
 SELECT PG_PREWARM(30936);
 SELECT PG_PREWARM(30937);
 SELECT PG_PREWARM(30938);
 SELECT PG_PREWARM(30951);
 SELECT PG_PREWARM(30952);
 SELECT PG_PREWARM(30981);
 SELECT PG_PREWARM(30982);
 SELECT PG_PREWARM(30983);
 SELECT PG_PREWARM(30972);
 SELECT PG_PREWARM(31002);
 SELECT PG_PREWARM(30957);
 SELECT PG_PREWARM(30996);
 SELECT PG_PREWARM(31011);
 SELECT PG_PREWARM(30987);
 SELECT PG_PREWARM(31017);
 SELECT PG_PREWARM(31032);
 SELECT PG_PREWARM(30953);
 SELECT PG_PREWARM(31012);
 SELECT PG_PREWARM(31013);
 SELECT PG_PREWARM(30966);
 SELECT PG_PREWARM(30967);
 SELECT PG_PREWARM(30968);
 SELECT PG_PREWARM(31026);
 SELECT PG_PREWARM(31027);
 SELECT PG_PREWARM(31028);
 SELECT PG_PREWARM(31041);
 SELECT PG_PREWARM(31062);
 SELECT PG_PREWARM(31077);
 SELECT PG_PREWARM(31072);
 SELECT PG_PREWARM(31047);
 SELECT PG_PREWARM(31092);
 SELECT PG_PREWARM(31107);
 SELECT PG_PREWARM(31042);
 SELECT PG_PREWARM(31043);
 SELECT PG_PREWARM(31056);
 SELECT PG_PREWARM(31057);
 SELECT PG_PREWARM(31071);
 SELECT PG_PREWARM(31073);
 SELECT PG_PREWARM(31086);
 SELECT PG_PREWARM(31087);
 SELECT PG_PREWARM(31088);
 SELECT PG_PREWARM(31101);
 SELECT PG_PREWARM(31102);
 SELECT PG_PREWARM(31103);
 SELECT PG_PREWARM(31116);
 SELECT PG_PREWARM(31117);
 SELECT PG_PREWARM(31118);
 SELECT PG_PREWARM(31152);
 SELECT PG_PREWARM(31167);
 SELECT PG_PREWARM(31122);
 SELECT PG_PREWARM(31137);
 SELECT PG_PREWARM(31131);
 SELECT PG_PREWARM(31132);
 SELECT PG_PREWARM(31133);
 SELECT PG_PREWARM(31146);
 SELECT PG_PREWARM(31147);
 SELECT PG_PREWARM(31148);
 SELECT PG_PREWARM(31161);
 SELECT PG_PREWARM(31162);
 SELECT PG_PREWARM(31163);
 SELECT PG_PREWARM(31176);
 SELECT PG_PREWARM(31177);
 SELECT PG_PREWARM(31178);
 SELECT PG_PREWARM(30757);
 SELECT PG_PREWARM(30758);
 SELECT PG_PREWARM(30832);
 SELECT PG_PREWARM(30833);
 SELECT PG_PREWARM(30862);
 SELECT PG_PREWARM(30863);
 SELECT PG_PREWARM(30878);
 SELECT PG_PREWARM(30997);
 SELECT PG_PREWARM(31058);
 SELECT PG_PREWARM(31627);
 SELECT PG_PREWARM(31628);
 SELECT PG_PREWARM(31639);
 SELECT PG_PREWARM(31629);
 SELECT PG_PREWARM(31640);
 SELECT PG_PREWARM(31630);
 SELECT PG_PREWARM(31641);
 SELECT PG_PREWARM(31631);
 SELECT PG_PREWARM(31632);
 SELECT PG_PREWARM(31636);
 SELECT PG_PREWARM(31633);
 SELECT PG_PREWARM(31638);
 SELECT PG_PREWARM(31634);
 SELECT PG_PREWARM(31637);
 SELECT PG_PREWARM(31635);
 SELECT PG_PREWARM(30998);
(155 rows)

********* QUERY **********
CREATE EXTENSION file_fdw;
**************************

********* QUERY **********
CREATE SERVER graph_import FOREIGN DATA WRAPPER file_fdw;
**************************

********* QUERY **********
CREATE EXTENSION pg_prewarm;
**************************

********* QUERY **********
DROP GRAPH IF EXISTS ldbc CASCADE;
**************************

DROP GRAPH
********* QUERY **********
CREATE GRAPH ldbc;
**************************

CREATE GRAPH
********* QUERY **********
SET GRAPH_PATH = ldbc;
**************************

SET
********* QUERY **********
ALTER DATABASE ldbc_interactive SET graph_path = ldbc ;
**************************

ALTER DATABASE
********* QUERY **********
CREATE VLABEL Forum DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Message DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Post DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL "Comment" DISABLE INDEX INHERITS (Message);
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Organization DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Person DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Place DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL Tag DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE VLABEL TagClass DISABLE INDEX;
**************************

CREATE VLABEL
********* QUERY **********
CREATE ELABEL containerOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorPost DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasCreatorComment DISABLE INDEX INHERITS (hasCreator);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasInterest DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasMember DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasModerator DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTag DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagPost DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagComment DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasTagForum DISABLE INDEX INHERITS (hasTag);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL hasType DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedIn DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInOrgan DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPerson DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInMsg DISABLE INDEX INHERITS (isLocatedIn);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInPost DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isLocatedInComment DISABLE INDEX INHERITS (isLocatedInMsg);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isPartOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL isSubclassOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL knows DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likes DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesPost DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL likesComment DISABLE INDEX INHERITS (likes);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOf DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfPost DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL replyOfComment DISABLE INDEX INHERITS (replyOf);
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL studyAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
CREATE ELABEL workAt DISABLE INDEX;
**************************

CREATE ELABEL
********* QUERY **********
ALTER VLABEL forum SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL message SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL post SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL "Comment" SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Organization SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Person SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Place SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL Tag SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER VLABEL TagClass SET UNLOGGED;
**************************

ALTER VLABEL
********* QUERY **********
ALTER ELABEL containerOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasCreatorComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasInterest SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasMember SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasModerator SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTag SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasTagForum SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL hasType SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedIn SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInOrgan SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isLocatedInPerson SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isPartOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL isSubclassOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL knows SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likes SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL likesComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOf SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfPost SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL replyOfComment SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL studyAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
ALTER ELABEL workAt SET UNLOGGED;
**************************

ALTER ELABEL
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForum CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewForum;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwForum
(
	id INT8,
	title VARCHAR(256),
	creationDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewForum AS (
SELECT 
	id,
	title,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM fdwForum
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganization CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganization
(
	id INT8,
	type VARCHAR(80),
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	FORMAT 'csv',
	HEADER 'true',
	DELIMITER '|',
	NULL '',
	FILENAME '/home/s166098/graph_databases/social_network//static/organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPerson CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPerson
(
	id INT8,
	firstName VARCHAR(80),
	lastName VARCHAR(80),
	gender VARCHAR(6),
	birthday TIMESTAMPTZ,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwEmail CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwEmail
(
	id INT8,
	email VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_email_emailaddress_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLanguage;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPerson;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLanguage
(
	id INT8,
	language VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_speaks_language_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPerson AS (
    SELECT 
		p.id AS id,
		firstName,
		lastName,
		gender,
		EXTRACT(EPOCH FROM birthday) * 1000 as birthday,
		EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
		locationIP,
		browserUsed,
        email, speaks
    FROM
        fdwPerson p 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(email) email FROM fdwEmail GROUP BY id) e 
	ON p.id = e.id 
	LEFT OUTER JOIN
	    (SELECT id, ARRAY_AGG(language) speaks FROM fdwLanguage GROUP BY id) l 
	ON p.id = l.id
);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPlace CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPlace
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200),
	type VARCHAR(80)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTag
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwTagClass CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwTagClass
(
	id INT8,
	name VARCHAR(200),
	url VARCHAR(200)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwPost
(
	id INT8,
	imageFile VARCHAR(80),
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	lanaguage VARCHAR(80),
	content text,
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewPost AS (
SELECT
	id,
	imageFile,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	lanaguage,
	content,
	length
FROM fdwPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwComment
(
	id INT8,
	creationDate TIMESTAMPTZ,
	locationIP VARCHAR(80),
	browserUsed VARCHAR(80),
	content VARCHAR(2000),
	length int4
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewComment AS (
SELECT
	id,
	EXTRACT(EPOCH FROM creationDate) * 1000 as creationDate,
	locationIP,
	browserUsed,
	content,
	length
FROM fdwComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwContainerOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwContainerOf
(
	forumId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_containerOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasCreator
(
	postId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasCreator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasCreator
(
	commentId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasCreator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasInterest CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasInterest
(
	personId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_hasInterest_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasMember CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewHasMember;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwHasMember
(
	forumId INT8,
	personId INT8,
	joinDate TIMESTAMPTZ
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasMember_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewHasMember AS (
SELECT
	forumId,
	personId,
	EXTRACT(EPOCH FROM joinDate) * 1000 AS joinDate
FROM fdwHasMember);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasModerator CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasModerator
(
	forumId INT8,
	personId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasModerator_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostHasTag
(
	postId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentHasTag
(
	commentId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwForumHasTag CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwForumHasTag
(
	forumId INT8,
	tagId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/forum_hasTag_tag_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwHasType CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwHasType
(
	tagId INT8,
	tagclassId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tag_hasType_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwOrganIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwOrganIsLocatedIn
(
	organId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/organisation_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPostIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPostIsLocatedIn
(
	postId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/post_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwCommentIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwCommentIsLocatedIn
(
	commentId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwPersonIsLocatedIn CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwPersonIsLocatedIn
(
	personId INT8,
	placeId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_isLocatedIn_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsPartOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsPartOf
(
	place1Id INT8,
	place2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/place_isPartOf_place_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwIsSubclassOf CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwIsSubclassOf
(
	tagclass1Id INT8,
	tagclass2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//static/tagclass_isSubclassOf_tagclass_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwKnows CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewKnows;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwKnows
(
	person1Id INT8,
	person2Id INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_knows_person_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewKnows AS (
SELECT
	person1Id,
	person2Id,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwKnows);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesPost;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesPost
(
	personId INT8,
	postId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesPost AS (
SELECT
	personId,
	postId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesPost);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwLikesComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
DROP VIEW IF EXISTS viewLikesComment;
**************************

DROP VIEW
********* QUERY **********
CREATE FOREIGN TABLE fdwLikesComment
(
	personId INT8,
	commentId INT8,
	creationDate TIMESTAMPTZ 
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_likes_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
CREATE VIEW viewLikesComment AS (
SELECT
	personId,
	commentId,
	EXTRACT(EPOCH FROM creationDate) * 1000 AS creationDate
FROM
	fdwLikesComment);
**************************

CREATE VIEW
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfPost CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfPost
(
	commentId INT8,
	postId INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_post_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwReplyOfComment CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwReplyOfComment
(
	comment1Id INT8,
	comment2Id INT8
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/comment_replyOf_comment_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwStudyAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwStudyAt
(
	personId INT8,
	organId INT8,
	classYear CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_studyAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
DROP FOREIGN TABLE IF EXISTS fdwWorkAt CASCADE;
**************************

DROP FOREIGN TABLE
********* QUERY **********
CREATE FOREIGN TABLE fdwWorkAt
(
	personId INT8,
	organId INT8,
	workFrom CHAR(4)
)
SERVER graph_import
OPTIONS
(
	 FORMAT 'csv',
	 HEADER 'true',
	 DELIMITER '|',
	 NULL '',
	 FILENAME '/home/s166098/graph_databases/social_network//dynamic/person_workAt_organisation_0_0.csv'
);
**************************

CREATE FOREIGN TABLE
********* QUERY **********
LOAD FROM viewForum       AS row CREATE (:Forum        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwOrganization AS row CREATE (:Organization =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPerson      AS row CREATE (:Person       =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwPlace        AS row CREATE (:Place        =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewPost        AS row CREATE (:Post         =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM viewComment     AS row CREATE (:"Comment"    =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTag          AS row CREATE (:Tag          =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
LOAD FROM fdwTagClass     AS row CREATE (:TagClass     =JSONB_STRIP_NULLS(TO_JSONB(ROW_TO_JSON(row))));
**************************

********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON forum        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON message      (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON post         (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON "Comment"    (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON organization (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON person       (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON place        (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tag          (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE UNIQUE PROPERTY INDEX ON tagclass     (id);
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE INDEX ON ldbc.person USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.tag    USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE INDEX ON ldbc.place  USING gin (properties JSONB_path_ops);
**************************

CREATE INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON message   ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON post      ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
CREATE PROPERTY INDEX ON "Comment" ( creationDate DESC, id ASC );
**************************

CREATE PROPERTY INDEX
********* QUERY **********
LOAD FROM fdwContainerOf as row
    MATCH (r:Forum), (s:Post)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:containerOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasCreator as row
    MATCH (r:Post), (s:Person)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasCreator as row
    MATCH (r:"Comment"), (s:Person)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasCreatorComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasInterest as row
    MATCH (r:Person), (s:Tag)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasInterest]->(s);
**************************

********* QUERY **********
LOAD FROM viewHasMember as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasMember {'joinDate': (row).joinDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasModerator as row
    MATCH (r:Forum), (s:Person)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).personId)
   CREATE (r)-[:hasModerator]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostHasTag as row
    MATCH (r:Post), (s:Tag)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentHasTag as row
    MATCH (r:"Comment"), (s:Tag)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwForumHasTag as row
    MATCH (r:Forum), (s:Tag)
    WHERE (r).id = TO_JSONB((row).forumId) and (s).id = TO_JSONB((row).tagId)
   CREATE (r)-[:hasTagForum]->(s);
**************************

********* QUERY **********
LOAD FROM fdwHasType as row
    MATCH (r:Tag), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagId) and (s).id = TO_JSONB((row).tagclassId)
   CREATE (r)-[:hasType]->(s);
**************************

********* QUERY **********
LOAD FROM fdwOrganIsLocatedIn as row
    MATCH (r:Organization), (s:Place)
    WHERE (r).id = TO_JSONB((row).organId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInOrgan]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPostIsLocatedIn as row
    MATCH (r:Post), (s:Place)
    WHERE (r).id = TO_JSONB((row).postId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwCommentIsLocatedIn as row
    MATCH (r:"Comment"), (s:Place)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwPersonIsLocatedIn as row
    MATCH (r:Person), (s:Place)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).placeId)
   CREATE (r)-[:isLocatedInPerson]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsPartOf as row
    MATCH (r:Place), (s:Place)
    WHERE (r).id = TO_JSONB((row).place1Id) and (s).id = TO_JSONB((row).place2Id)
   CREATE (r)-[:isPartOf]->(s);
**************************

********* QUERY **********
LOAD FROM fdwIsSubclassOf as row
    MATCH (r:TagClass), (s:TagClass)
    WHERE (r).id = TO_JSONB((row).tagclass1Id) and (s).id = TO_JSONB((row).tagclass2Id)
   CREATE (r)-[:isSubclassOf]->(s);
**************************

********* QUERY **********
LOAD FROM viewKnows as row
    MATCH (r:Person), (s:Person)
    WHERE (r).id = TO_JSONB((row).person1Id) and (s).id = TO_JSONB((row).person2Id)
   CREATE (r)-[:knows {'creationDate': (row).creationDate}]->(s)
   CREATE (s)-[:knows {'creationDate': (row).creationDate}]->(r);
**************************

********* QUERY **********
LOAD FROM viewLikesPost as row
    MATCH (r:Person), (s:Post)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:likesPost {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM viewLikesComment as row
    MATCH (r:Person), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).commentId)
   CREATE (r)-[:likesComment {'creationDate': (row).creationDate}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfPost as row
    MATCH (r:"Comment"), (s:Post)
    WHERE (r).id = TO_JSONB((row).commentId) and (s).id = TO_JSONB((row).postId)
   CREATE (r)-[:replyOfPost]->(s);
**************************

********* QUERY **********
LOAD FROM fdwReplyOfComment as row
    MATCH (r:"Comment"), (s:"Comment")
    WHERE (r).id = TO_JSONB((row).comment1Id) and (s).id = TO_JSONB((row).comment2Id)
   CREATE (r)-[:replyOfComment]->(s);
**************************

********* QUERY **********
LOAD FROM fdwStudyAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:studyAt {'classYear': (row).classYear}]->(s);
**************************

********* QUERY **********
LOAD FROM fdwWorkAt as row
    MATCH (r:Person), (s:Organization)
    WHERE (r).id = TO_JSONB((row).personId) and (s).id = TO_JSONB((row).organId)
   CREATE (r)-[:workAt {'workFrom': (row).workFrom}]->(s);
**************************

********* QUERY **********
VACUUM ANALYZE ldbc.forum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.message;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.post;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc."Comment";
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.organization;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.person;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.place;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.tagclass;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.containerOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasCreatorComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasInterest;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasMember;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasModerator;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTag;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasTagForum;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.hasType;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedIn;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInOrgan;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isLocatedInPerson;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isPartOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.isSubclassOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.knows;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likes;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.likesComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOf;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfPost;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.replyOfComment;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.studyAt;
**************************

VACUUM
********* QUERY **********
VACUUM ANALYZE ldbc.workAt;
**************************

VACUUM
********* QUERY **********
REINDEX VLABEL forum;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL message;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL post;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL "Comment";
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL organization;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL person;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL place;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tag;
**************************

REINDEX
********* QUERY **********
REINDEX VLABEL tagclass;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL containerOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasCreatorComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasInterest;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasMember;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasModerator;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTag;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasTagForum;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL hasType;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedIn;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInOrgan;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isLocatedInPerson;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isPartOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL isSubclassOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL knows;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likes;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL likesComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOf;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfPost;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL replyOfComment;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL studyAt;
**************************

REINDEX
********* QUERY **********
REINDEX ELABEL workAt;
**************************

REINDEX
********* QUERY **********
SELECT 'SELECT PG_PREWARM(' || c.oid || ');'
FROM 
  pg_class c 
LEFT JOIN 
  pg_namespace n 
ON n.oid = c.relnamespace 
WHERE 
  nspname = 'ldbc' AND (relkind = 'i' OR relkind = 'r');
**************************

         ?column?          
---------------------------
 SELECT PG_PREWARM(32288);
 SELECT PG_PREWARM(32289);
 SELECT PG_PREWARM(32828);
 SELECT PG_PREWARM(32829);
 SELECT PG_PREWARM(32840);
 SELECT PG_PREWARM(32830);
 SELECT PG_PREWARM(32841);
 SELECT PG_PREWARM(32831);
 SELECT PG_PREWARM(32842);
 SELECT PG_PREWARM(32832);
 SELECT PG_PREWARM(32833);
 SELECT PG_PREWARM(32837);
 SELECT PG_PREWARM(32834);
 SELECT PG_PREWARM(32839);
 SELECT PG_PREWARM(32835);
 SELECT PG_PREWARM(32838);
 SELECT PG_PREWARM(32836);
 SELECT PG_PREWARM(31802);
 SELECT PG_PREWARM(31822);
 SELECT PG_PREWARM(31816);
 SELECT PG_PREWARM(31817);
 SELECT PG_PREWARM(31818);
 SELECT PG_PREWARM(31793);
 SELECT PG_PREWARM(31836);
 SELECT PG_PREWARM(31850);
 SELECT PG_PREWARM(31864);
 SELECT PG_PREWARM(31892);
 SELECT PG_PREWARM(31859);
 SELECT PG_PREWARM(31873);
 SELECT PG_PREWARM(31807);
 SELECT PG_PREWARM(31878);
 SELECT PG_PREWARM(31831);
 SELECT PG_PREWARM(31845);
 SELECT PG_PREWARM(31887);
 SELECT PG_PREWARM(31901);
 SELECT PG_PREWARM(31920);
 SELECT PG_PREWARM(31934);
 SELECT PG_PREWARM(31948);
 SELECT PG_PREWARM(31963);
 SELECT PG_PREWARM(31929);
 SELECT PG_PREWARM(31943);
 SELECT PG_PREWARM(31906);
 SELECT PG_PREWARM(31978);
 SELECT PG_PREWARM(31993);
 SELECT PG_PREWARM(31915);
 SELECT PG_PREWARM(31957);
 SELECT PG_PREWARM(31958);
 SELECT PG_PREWARM(31959);
 SELECT PG_PREWARM(31972);
 SELECT PG_PREWARM(31973);
 SELECT PG_PREWARM(31974);
 SELECT PG_PREWARM(31987);
 SELECT PG_PREWARM(31988);
 SELECT PG_PREWARM(31989);
 SELECT PG_PREWARM(32002);
 SELECT PG_PREWARM(32003);
 SELECT PG_PREWARM(32023);
 SELECT PG_PREWARM(32038);
 SELECT PG_PREWARM(32053);
 SELECT PG_PREWARM(32017);
 SELECT PG_PREWARM(32032);
 SELECT PG_PREWARM(32008);
 SELECT PG_PREWARM(32068);
 SELECT PG_PREWARM(32083);
 SELECT PG_PREWARM(32004);
 SELECT PG_PREWARM(32033);
 SELECT PG_PREWARM(32034);
 SELECT PG_PREWARM(32047);
 SELECT PG_PREWARM(32048);
 SELECT PG_PREWARM(32049);
 SELECT PG_PREWARM(32062);
 SELECT PG_PREWARM(32063);
 SELECT PG_PREWARM(32064);
 SELECT PG_PREWARM(32077);
 SELECT PG_PREWARM(32078);
 SELECT PG_PREWARM(32079);
 SELECT PG_PREWARM(32092);
 SELECT PG_PREWARM(32093);
 SELECT PG_PREWARM(32113);
 SELECT PG_PREWARM(32128);
 SELECT PG_PREWARM(32143);
 SELECT PG_PREWARM(32124);
 SELECT PG_PREWARM(32182);
 SELECT PG_PREWARM(32183);
 SELECT PG_PREWARM(32173);
 SELECT PG_PREWARM(32098);
 SELECT PG_PREWARM(32158);
 SELECT PG_PREWARM(32094);
 SELECT PG_PREWARM(32107);
 SELECT PG_PREWARM(32122);
 SELECT PG_PREWARM(32123);
 SELECT PG_PREWARM(32137);
 SELECT PG_PREWARM(32138);
 SELECT PG_PREWARM(32139);
 SELECT PG_PREWARM(32152);
 SELECT PG_PREWARM(32153);
 SELECT PG_PREWARM(32154);
 SELECT PG_PREWARM(32167);
 SELECT PG_PREWARM(32168);
 SELECT PG_PREWARM(32169);
 SELECT PG_PREWARM(32184);
 SELECT PG_PREWARM(32203);
 SELECT PG_PREWARM(32218);
 SELECT PG_PREWARM(32233);
 SELECT PG_PREWARM(32213);
 SELECT PG_PREWARM(32188);
 SELECT PG_PREWARM(32214);
 SELECT PG_PREWARM(32248);
 SELECT PG_PREWARM(32263);
 SELECT PG_PREWARM(32197);
 SELECT PG_PREWARM(32212);
 SELECT PG_PREWARM(32227);
 SELECT PG_PREWARM(32228);
 SELECT PG_PREWARM(32229);
 SELECT PG_PREWARM(32242);
 SELECT PG_PREWARM(32243);
 SELECT PG_PREWARM(32244);
 SELECT PG_PREWARM(32257);
 SELECT PG_PREWARM(32258);
 SELECT PG_PREWARM(32259);
 SELECT PG_PREWARM(32272);
 SELECT PG_PREWARM(32293);
 SELECT PG_PREWARM(32308);
 SELECT PG_PREWARM(32323);
 SELECT PG_PREWARM(32302);
 SELECT PG_PREWARM(32303);
 SELECT PG_PREWARM(32278);
 SELECT PG_PREWARM(32338);
 SELECT PG_PREWARM(32353);
 SELECT PG_PREWARM(32273);
 SELECT PG_PREWARM(32274);
 SELECT PG_PREWARM(32287);
 SELECT PG_PREWARM(32304);
 SELECT PG_PREWARM(32317);
 SELECT PG_PREWARM(32318);
 SELECT PG_PREWARM(32319);
 SELECT PG_PREWARM(32332);
 SELECT PG_PREWARM(32333);
 SELECT PG_PREWARM(32334);
 SELECT PG_PREWARM(32347);
 SELECT PG_PREWARM(32348);
 SELECT PG_PREWARM(32349);
 SELECT PG_PREWARM(32368);
 SELECT PG_PREWARM(32018);
 SELECT PG_PREWARM(32362);
 SELECT PG_PREWARM(32363);
 SELECT PG_PREWARM(32364);
 SELECT PG_PREWARM(32377);
 SELECT PG_PREWARM(32378);
 SELECT PG_PREWARM(32379);
 SELECT PG_PREWARM(32019);
 SELECT PG_PREWARM(32108);
 SELECT PG_PREWARM(32109);
 SELECT PG_PREWARM(32198);
 SELECT PG_PREWARM(32199);
(155 rows)

